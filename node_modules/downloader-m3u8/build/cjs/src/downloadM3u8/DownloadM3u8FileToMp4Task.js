"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownloadM3u8FileMp4 = void 0;
var downloadM3u8FileToMp4_1 = require("./downloadM3u8FileToMp4");
var downloadM3u8TsFileTask_1 = __importDefault(require("./downloadM3u8TsFileTask"));
var taskUtil_1 = require("../task/taskUtil");
var downloadM3u8File_1 = require("./downloadM3u8File");
var index_1 = require("../fileUtil/index");
var m3u8FileParser_1 = require("./m3u8FileParser");
var md5 = require('md5');
var path = require('path');
var DownloadState;
(function (DownloadState) {
    DownloadState[DownloadState["STOP"] = 0] = "STOP";
    DownloadState[DownloadState["START"] = 1] = "START";
})(DownloadState || (DownloadState = {}));
var DownloadM3u8FileMp4 = /** @class */ (function () {
    function DownloadM3u8FileMp4(opt) {
        this.downloadOption = opt;
        var onProgress = opt.onProgress, onFinish = opt.onFinish, onFail = opt.onFail;
        onProgress && (this.doProgress = onProgress);
        onFinish && (this.doFinish = onFinish);
        onFail && (this.doFail = onFail);
        this.state = DownloadState.STOP;
    }
    DownloadM3u8FileMp4.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ret, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.state = DownloadState.START;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.startDownload()];
                    case 2:
                        ret = _a.sent();
                        if (ret !== 'finish') {
                            console.log('任务取消，可以重新发起');
                            this.doFail && this.doFail('用户手动停止');
                        }
                        else {
                            console.log('任务完成');
                            this.doFinish && this.doFinish();
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        this.doFail && this.doFail(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DownloadM3u8FileMp4.prototype.startDownload = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, m3u8Url, filePath, title, downloadConfig, m3u8TempFile, m3u8file, m3u8Option, depathTs;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.state !== DownloadState.START)
                            return [2 /*return*/, ''];
                        _a = this.downloadOption, m3u8Url = _a.m3u8Url, filePath = _a.filePath, title = _a.title;
                        downloadConfig = downloadM3u8FileToMp4_1.getDownloadConfig(this.downloadOption);
                        if (downloadConfig.m3u8Url !== m3u8Url) {
                            downloadConfig.m3u8Url = m3u8Url;
                            downloadConfig.title = title;
                            downloadM3u8FileToMp4_1.saveDownloadConfig(this.downloadOption, downloadConfig);
                        }
                        m3u8TempFile = path.resolve(filePath, title, 'tmp', 'des.m3u8');
                        return [4 /*yield*/, downloadM3u8File_1.downloadM3u8File({
                                url: m3u8Url,
                                file: m3u8TempFile,
                                headers: this.downloadOption.headers || {},
                            })];
                    case 1:
                        m3u8file = _b.sent();
                        if (this.state !== DownloadState.START)
                            return [2 /*return*/, ''];
                        m3u8Option = m3u8FileParser_1.parseM3u8File(index_1.getFileContent(m3u8file));
                        // console.log(JSON.stringify(m3u8Option));
                        if (m3u8Option.type == 0) {
                            // 需要再次下载真正的m3u8;
                            if (m3u8Option.realM3u8Url) {
                                this.downloadOption.m3u8Url = downloadM3u8FileToMp4_1.parseUrl(m3u8Url, m3u8Option.realM3u8Url);
                                return [2 /*return*/, this.startDownload()];
                            }
                            throw 'm3u8文件有问题，请查看';
                        }
                        return [4 /*yield*/, downloadM3u8FileToMp4_1.downloadM3u8KeyFileAndParseKey(this.downloadOption, m3u8Option)];
                    case 2:
                        m3u8Option = _b.sent();
                        if (this.state !== DownloadState.START)
                            return [2 /*return*/];
                        if (!!downloadConfig.connectTsFile) return [3 /*break*/, 5];
                        // 下载 ts 片段
                        return [4 /*yield*/, this.downloadM3u8TsFile(m3u8Option)];
                    case 3:
                        // 下载 ts 片段
                        _b.sent();
                        return [4 /*yield*/, downloadM3u8FileToMp4_1.connectTsFile(this.downloadOption, m3u8Option)];
                    case 4:
                        depathTs = _b.sent();
                        downloadConfig = downloadM3u8FileToMp4_1.getDownloadConfig(this.downloadOption);
                        downloadConfig.connectTsFile = depathTs;
                        downloadM3u8FileToMp4_1.saveDownloadConfig(this.downloadOption, downloadConfig);
                        downloadM3u8FileToMp4_1.deleteTmpFile(this.downloadOption);
                        _b.label = 5;
                    case 5:
                        // 转换成mp4
                        downloadM3u8FileToMp4_1.tranformMp4(this.downloadOption);
                        downloadM3u8FileToMp4_1.deleteTmpPath(this.downloadOption);
                        return [2 /*return*/, 'finish'];
                }
            });
        });
    };
    DownloadM3u8FileMp4.prototype.downloadM3u8TsFile = function (m3u8Option) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, m3u8Url, filePath, title, headers, _b, threadCount, tsUrls, downloadConfig, _c, hasDownloadFiles, pool, tsFiles, fileSet;
            var _this = this;
            return __generator(this, function (_d) {
                _a = this.downloadOption, m3u8Url = _a.m3u8Url, filePath = _a.filePath, title = _a.title, headers = _a.headers, _b = _a.threadCount, threadCount = _b === void 0 ? 20 : _b;
                tsUrls = m3u8Option.tsUrls;
                downloadConfig = downloadM3u8FileToMp4_1.getDownloadConfig(this.downloadOption);
                _c = downloadConfig.hasDownloadFiles, hasDownloadFiles = _c === void 0 ? [] : _c;
                pool = (this.pool = new taskUtil_1.TaskPool(threadCount, hasDownloadFiles.length));
                tsFiles = [];
                fileSet = new Set();
                hasDownloadFiles.forEach(function (file) {
                    fileSet.add(file);
                });
                tsUrls &&
                    tsUrls.forEach(function (tsUrl, index) {
                        tsUrl = downloadM3u8FileToMp4_1.parseUrl(m3u8Url, tsUrl);
                        var url = new URL(tsUrl);
                        // const fileName = url.pathname
                        //     .substring(url.pathname.lastIndexOf('/') + 1)
                        //     .split('?')[0];
                        var fileName = md5(url.pathname);
                        var file = path.resolve(filePath, title, 'tmp', fileName);
                        tsFiles.push(file);
                        if (!fileSet.has(file)) {
                            pool.addTask(new downloadM3u8TsFileTask_1.default(tsUrl, file, headers || {}));
                        }
                    });
                m3u8Option.tsFiles = tsFiles;
                if (pool.isEmpty()) {
                    return [2 /*return*/, ''];
                }
                pool.onProgress(function (progress, task) {
                    if (_this.state == DownloadState.START) {
                        // console.log(`当前进度:${progress * 100}%`);
                        var filePath_1 = task.getFilepath();
                        hasDownloadFiles.push(filePath_1);
                        downloadConfig.hasDownloadFiles = hasDownloadFiles;
                        downloadM3u8FileToMp4_1.saveDownloadConfig(_this.downloadOption, downloadConfig);
                        _this.doProgress && _this.doProgress(progress);
                    }
                    else {
                    }
                });
                return [2 /*return*/, new Promise(function (res, rej) {
                        pool.addFinishListener(res);
                        pool.addStopListener(rej);
                    })];
            });
        });
    };
    DownloadM3u8FileMp4.prototype.stop = function () {
        this.state = DownloadState.STOP;
        if (this.pool) {
            this.pool.stop();
        }
    };
    DownloadM3u8FileMp4.prototype.onProgress = function (doProgress) {
        this.doProgress = doProgress;
    };
    DownloadM3u8FileMp4.prototype.onFinish = function (doFinish) {
        this.doFinish = doFinish;
    };
    DownloadM3u8FileMp4.prototype.onFail = function (doFail) {
        this.doFail = doFail;
    };
    return DownloadM3u8FileMp4;
}());
exports.DownloadM3u8FileMp4 = DownloadM3u8FileMp4;
