"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseUrl = exports.downloadM3u8KeyFileAndParseKey = exports.connectTsFile = exports.deleteTmpPath = exports.deleteTmpFile = exports.tranformMp4 = exports.downloadM3u8FileToMp4 = exports.deleteDownloadConfig = exports.saveDownloadConfig = exports.getDownloadConfig = void 0;
var downloadM3u8File_1 = require("./downloadM3u8File");
var m3u8FileParser_1 = require("./m3u8FileParser");
var index_1 = require("../fileUtil/index");
var taskUtil_1 = require("../task/taskUtil");
var AES_1 = require("../aes/AES");
var downloadM3u8TsFileTask_1 = __importDefault(require("./downloadM3u8TsFileTask"));
var md5 = require('md5');
var execSync = require('child_process').execSync;
var fs = require('fs-extra');
var path = require('path');
var parse = require('url').parse;
var getDownloadConfig = function (_a) {
    var filePath = _a.filePath, title = _a.title;
    var configFile = path.resolve(filePath, title, 'download.config');
    var content = index_1.getFileContent(configFile);
    if (content) {
        return JSON.parse(content);
    }
    return {
        filePath: filePath,
    };
};
exports.getDownloadConfig = getDownloadConfig;
var saveDownloadConfig = function (_a, config) {
    var filePath = _a.filePath, title = _a.title;
    var configFile = path.resolve(filePath, title, "download.config");
    index_1.saveJson(configFile, config);
};
exports.saveDownloadConfig = saveDownloadConfig;
var deleteDownloadConfig = function (_a) {
    var filePath = _a.filePath, title = _a.title;
    var configFile = path.resolve(filePath, title, 'download.config');
    fs.removeSync(configFile);
};
exports.deleteDownloadConfig = deleteDownloadConfig;
var downloadM3u8FileToMp4 = function (opts) { return __awaiter(void 0, void 0, void 0, function () {
    var m3u8Url, filePath, title, headers, downloadConfig, m3u8TempFile, m3u8file, m3u8Option, depathTs;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                m3u8Url = opts.m3u8Url, filePath = opts.filePath, title = opts.title, headers = opts.headers;
                downloadConfig = exports.getDownloadConfig(opts);
                if (downloadConfig.m3u8Url !== m3u8Url) {
                    downloadConfig.m3u8Url = m3u8Url;
                    downloadConfig.title = opts.title;
                    exports.saveDownloadConfig(opts, downloadConfig);
                }
                m3u8TempFile = path.resolve(filePath, title, 'tmp', 'des.m3u8');
                return [4 /*yield*/, downloadM3u8File_1.downloadM3u8File({
                        url: m3u8Url,
                        file: m3u8TempFile,
                    })];
            case 1:
                m3u8file = _a.sent();
                m3u8Option = m3u8FileParser_1.parseM3u8File(index_1.getFileContent(m3u8file));
                // console.log(JSON.stringify(m3u8Option));
                if (m3u8Option.type == 0) {
                    // 需要再次下载真正的m3u8;
                    if (m3u8Option.realM3u8Url) {
                        opts.m3u8Url = exports.parseUrl(m3u8Url, m3u8Option.realM3u8Url);
                        return [2 /*return*/, exports.downloadM3u8FileToMp4(opts)];
                    }
                    throw 'm3u8文件有问题，请查看';
                }
                return [4 /*yield*/, exports.downloadM3u8KeyFileAndParseKey(opts, m3u8Option)];
            case 2:
                // 下载 解析 key
                m3u8Option = _a.sent();
                if (!!downloadConfig.connectTsFile) return [3 /*break*/, 5];
                // 下载 ts 片段
                return [4 /*yield*/, downloadM3u8TsFile(opts, m3u8Option)];
            case 3:
                // 下载 ts 片段
                _a.sent();
                return [4 /*yield*/, exports.connectTsFile(opts, m3u8Option)];
            case 4:
                depathTs = _a.sent();
                downloadConfig = exports.getDownloadConfig(opts);
                downloadConfig.connectTsFile = depathTs;
                exports.saveDownloadConfig(opts, downloadConfig);
                exports.deleteTmpFile(opts);
                _a.label = 5;
            case 5:
                // 转换成mp4
                exports.tranformMp4(opts);
                exports.deleteTmpPath(opts);
                return [2 /*return*/];
        }
    });
}); };
exports.downloadM3u8FileToMp4 = downloadM3u8FileToMp4;
var tranformMp4 = function (opts) {
    var title = opts.title, filePath = opts.filePath, _a = opts.ffmpegPath, ffmpegPath = _a === void 0 ? 'ffmpeg' : _a;
    var depathMp4 = path.resolve(filePath, title + ".ts");
    try {
        execSync(ffmpegPath + " -i \"" + depathMp4 + "\" -acodec copy -vcodec copy -f mp4 \"" + depathMp4.replace('.ts', '.mp4') + "\"");
        fs.removeSync(depathMp4);
    }
    catch (e) {
        console.log(e);
    }
};
exports.tranformMp4 = tranformMp4;
var clearFilePath = function (filePath) {
    fs.removeSync(filePath);
};
var deleteTmpFile = function (opts) {
    var filePath = opts.filePath, title = opts.title;
    var file = path.resolve(filePath, title, 'tmp');
    fs.removeSync(file);
};
exports.deleteTmpFile = deleteTmpFile;
var deleteTmpPath = function (opts) {
    var filePath = opts.filePath, title = opts.title;
    var file = path.resolve(filePath, title);
    fs.removeSync(file);
};
exports.deleteTmpPath = deleteTmpPath;
var connectTsFile = function (opts, m3u8Option) { return __awaiter(void 0, void 0, void 0, function () {
    var title, filePath, key, iv, _a, tsFiles, depathMp4, aes, i, spath, buff, deHex, i, index, buffer, iv_1, aes, spath, buff, deHex, i, spath, buff;
    return __generator(this, function (_b) {
        title = opts.title, filePath = opts.filePath;
        key = m3u8Option.key, iv = m3u8Option.iv, _a = m3u8Option.tsFiles, tsFiles = _a === void 0 ? [] : _a;
        depathMp4 = path.resolve(filePath, title + ".ts");
        fs.ensureFileSync(depathMp4);
        if (key && iv) {
            aes = new AES_1.AES(key, iv);
            for (i = 0; i < tsFiles.length; i++) {
                try {
                    spath = tsFiles[i];
                    fs.ix;
                    buff = fs.readFileSync(spath);
                    deHex = aes.aesDecryptNew(buff);
                    fs.writeFileSync(depathMp4, new Buffer(deHex, 'hex'), {
                        flag: 'a',
                    });
                }
                catch (e) {
                    continue;
                }
            }
            return [2 /*return*/, depathMp4];
        }
        else if (key) {
            //没有iv的情况
            for (i = 0; i < tsFiles.length; i++) {
                index = i;
                buffer = Buffer.alloc(16);
                buffer.writeUInt32BE(index, 12); //write the high order bits (shifted over)
                iv_1 = buffer.toString('hex');
                console.log(iv_1);
                aes = new AES_1.AES(key, iv_1);
                try {
                    spath = tsFiles[i];
                    buff = fs.readFileSync(spath);
                    deHex = aes.aesDecryptNew(buff);
                    fs.writeFileSync(depathMp4, new Buffer(deHex, 'hex'), {
                        flag: 'a',
                    });
                }
                catch (e) {
                    continue;
                }
            }
            return [2 /*return*/, depathMp4];
        }
        else {
            for (i = 0; i < tsFiles.length; i++) {
                try {
                    spath = tsFiles[i];
                    buff = fs.readFileSync(spath);
                    fs.writeFileSync(depathMp4, buff, {
                        flag: 'a',
                    });
                }
                catch (e) {
                    continue;
                }
            }
            return [2 /*return*/, depathMp4];
        }
        return [2 /*return*/];
    });
}); };
exports.connectTsFile = connectTsFile;
var downloadM3u8TsFile = function (opts, m3u8Option) { return __awaiter(void 0, void 0, void 0, function () {
    var m3u8Url, filePath, title, headers, _a, threadCount, onProgress, tsUrls, downloadConfig, _b, hasDownloadFiles, pool, tsFiles, fileSet;
    return __generator(this, function (_c) {
        m3u8Url = opts.m3u8Url, filePath = opts.filePath, title = opts.title, headers = opts.headers, _a = opts.threadCount, threadCount = _a === void 0 ? 20 : _a, onProgress = opts.onProgress;
        tsUrls = m3u8Option.tsUrls;
        downloadConfig = exports.getDownloadConfig(opts);
        _b = downloadConfig.hasDownloadFiles, hasDownloadFiles = _b === void 0 ? [] : _b;
        pool = new taskUtil_1.TaskPool(threadCount, hasDownloadFiles.length);
        tsFiles = [];
        fileSet = new Set();
        hasDownloadFiles.forEach(function (file) {
            fileSet.add(file);
        });
        tsUrls &&
            tsUrls.forEach(function (tsUrl, index) {
                tsUrl = exports.parseUrl(m3u8Url, tsUrl);
                var url = new URL(tsUrl);
                var fileName = md5(url.pathname);
                var file = path.resolve(filePath, title, 'tmp', fileName);
                tsFiles.push(file);
                if (!fileSet.has(file)) {
                    pool.addTask(new downloadM3u8TsFileTask_1.default(tsUrl, file, headers || {}));
                }
            });
        m3u8Option.tsFiles = tsFiles;
        if (pool.isEmpty()) {
            return [2 /*return*/, ''];
        }
        pool.onProgress(function (progress, task) {
            // console.log(`当前进度:${progress * 100}%`);
            var filePath = task.getFilepath();
            hasDownloadFiles.push(filePath);
            downloadConfig.hasDownloadFiles = hasDownloadFiles;
            exports.saveDownloadConfig(opts, downloadConfig);
            if (onProgress) {
                onProgress(progress);
            }
        });
        return [2 /*return*/, new Promise(function (res, rej) {
                pool.addFinishListener(res);
            })];
    });
}); };
var downloadM3u8KeyFileAndParseKey = function (_a, m3u8Option) {
    var m3u8Url = _a.m3u8Url, filePath = _a.filePath, title = _a.title, headers = _a.headers;
    return __awaiter(void 0, void 0, void 0, function () {
        var keyUrl, keyUrlAll, m3u8KeyTempFile, keyFile, key;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    keyUrl = m3u8Option.keyUrl;
                    if (!keyUrl) return [3 /*break*/, 2];
                    keyUrlAll = exports.parseUrl(m3u8Url, keyUrl);
                    m3u8KeyTempFile = path.resolve(filePath, title, 'tmp', 'tmp.key');
                    return [4 /*yield*/, downloadM3u8File_1.downloadM3u8File({
                            url: keyUrlAll,
                            headers: headers,
                            file: m3u8KeyTempFile,
                        })];
                case 1:
                    keyFile = _b.sent();
                    key = fs.readFileSync(keyFile, 'hex');
                    m3u8Option.key = key;
                    _b.label = 2;
                case 2: return [2 /*return*/, m3u8Option];
            }
        });
    });
};
exports.downloadM3u8KeyFileAndParseKey = downloadM3u8KeyFileAndParseKey;
//相对路径换取正式网络地址
var parseUrl = function (sourceUrl, relativeUrl) {
    var up = parse(sourceUrl);
    var urlBase = '';
    if (relativeUrl.startsWith('/')) {
        var up_1 = parse(sourceUrl);
        urlBase = sourceUrl.replace(up_1.path, '');
    }
    else if (relativeUrl.startsWith('http')) {
        urlBase = '';
    }
    else {
        urlBase = sourceUrl.substring(0, sourceUrl.lastIndexOf('/') + 1);
    }
    relativeUrl = "" + urlBase + relativeUrl;
    return relativeUrl;
};
exports.parseUrl = parseUrl;
