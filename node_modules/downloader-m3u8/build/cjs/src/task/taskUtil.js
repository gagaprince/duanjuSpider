"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TaskPool = exports.Task = void 0;
/**
 * 一个简易的任务池，
 */
var TASK_STATUS;
(function (TASK_STATUS) {
    TASK_STATUS[TASK_STATUS["PENDING"] = 0] = "PENDING";
    TASK_STATUS[TASK_STATUS["DONGING"] = 1] = "DONGING";
    TASK_STATUS[TASK_STATUS["DONE"] = 2] = "DONE";
})(TASK_STATUS || (TASK_STATUS = {}));
var Task = /** @class */ (function () {
    function Task() {
        this.taskStatus = TASK_STATUS.PENDING;
        this.connection = null;
        this.taskIsSuccess = false;
    }
    Task.prototype.excute = function () {
        var _this = this;
        this.donging();
        var taskHandle = this.task();
        if (taskHandle instanceof Promise) {
            taskHandle
                .then(function () {
                _this.taskIsSuccess = true;
            })
                .catch(function (error) {
                _this.taskIsSuccess = false;
                console.log(error);
            })
                .finally(function () {
                _this.done();
            });
        }
        else {
            this.done();
        }
    };
    Task.prototype.setConnection = function (connection) {
        this.connection = connection;
    };
    Task.prototype.donging = function () {
        this.taskStatus = TASK_STATUS.DONGING;
    };
    Task.prototype.done = function () {
        this.taskStatus = TASK_STATUS.DONE;
        this.connection && this.connection.disconnect(this);
    };
    Task.prototype.getStatus = function () {
        return this.taskStatus;
    };
    Task.prototype.stop = function () {
    };
    return Task;
}());
exports.Task = Task;
var TaskPool = /** @class */ (function () {
    function TaskPool(taskMaxNum, hasFinishCount) {
        this.taskList = [];
        this.doningList = [];
        this.doneList = [];
        this.finishListeners = [];
        this.progressListeners = [];
        this.stopListeners = [];
        this.taskMaxNum = taskMaxNum;
        this.hasFinishCount = hasFinishCount;
        this.poolState = 0;
    }
    TaskPool.prototype.addTask = function (task) {
        if (this.poolState != 0) {
            console.log('当前任务池已经停止运行');
            return;
        }
        if (task.getStatus() === TASK_STATUS.PENDING) {
            this.taskList.push(task);
        }
        if (this.taskList.length === 1 &&
            this.doningList.length < this.taskMaxNum) {
            // 当有一个任务时且有空余的task执行
            this.excute();
        }
    };
    TaskPool.prototype.removeTask = function (task) {
        if (task.getStatus() !== TASK_STATUS.DONGING) {
            task.done(); // 不从task栈中去除，只改变状态，改变状态后，轮到此任务会直接跳过
        }
    };
    TaskPool.prototype.excute = function () {
        var _this = this;
        if (this.poolState !== 0) {
            return;
        }
        if (this.doningList.length < this.taskMaxNum) {
            var task = this.taskList.shift();
            if (task && task.getStatus() !== TASK_STATUS.DONE) {
                task.setConnection(this);
                this.doningList.push(task);
                task.excute();
            }
            else {
                // 任务完成
                if (this.doningList.length === 0) {
                    this.finishListeners.forEach(function (lis) {
                        if (lis) {
                            lis(_this.doneList);
                        }
                    });
                    this.doneList = [];
                    this.finishListeners = [];
                    this.progressListeners = [];
                }
            }
        }
    };
    TaskPool.prototype.disconnect = function (task) {
        if (this.poolState !== 0) {
            return;
        }
        // 将任务从doningList中删除
        var doningList = this.doningList;
        doningList.find(function (taskItem, index) {
            if (taskItem === task) {
                doningList.splice(index, 1);
                return true;
            }
        });
        this.doneList.push(task);
        this.doProgress(task);
        this.excute();
    };
    TaskPool.prototype.doProgress = function (task) {
        if (this.poolState !== 0) {
            return;
        }
        var doneLen = this.doneList.length + this.hasFinishCount;
        var allLen = doneLen + this.doningList.length + this.taskList.length || 1;
        var progress = doneLen / allLen;
        this.progressListeners.forEach(function (listener) {
            if (listener) {
                listener(progress, task);
            }
        });
    };
    TaskPool.prototype.onProgress = function (listener) {
        this.progressListeners.push(listener);
    };
    TaskPool.prototype.addFinishListener = function (listener) {
        this.finishListeners.push(listener);
    };
    TaskPool.prototype.addStopListener = function (listener) {
        this.stopListeners.push(listener);
    };
    TaskPool.prototype.isEmpty = function () {
        return this.taskList.length == 0 && this.doningList.length == 0;
    };
    TaskPool.prototype.clear = function () {
        this.taskList = [];
        this.doningList.forEach(function (task) {
            task.stop();
        });
        this.doneList = [];
        this.doningList = [];
    };
    TaskPool.prototype.stop = function () {
        this.poolState = 1;
        this.clear();
        this.stopListeners.forEach(function (listener) {
            if (listener) {
                listener('任务已停止');
            }
        });
    };
    return TaskPool;
}());
exports.TaskPool = TaskPool;
