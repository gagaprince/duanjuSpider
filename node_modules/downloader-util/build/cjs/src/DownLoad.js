"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DownLoad = void 0;
var fs = require('fs-extra');
var path = require('path');
var axios_1 = __importDefault(require("axios"));
var DownloadMoreThread_1 = __importDefault(require("./DownloadMoreThread"));
var fileutil_1 = require("./utils/fileutil");
var DownloadState;
(function (DownloadState) {
    DownloadState[DownloadState["start"] = 0] = "start";
    DownloadState[DownloadState["stop"] = 1] = "stop";
})(DownloadState || (DownloadState = {}));
var DownLoad = /** @class */ (function () {
    function DownLoad(opts) {
        this.retry = 3;
        this.onFailed = function (error) {
            console.log(error);
        };
        var url = opts.url, filePath = opts.filePath, retry = opts.retry, _a = opts.type, type = _a === void 0 ? 0 : _a, _b = opts.timeout, timeout = _b === void 0 ? 5000 : _b, _c = opts.threadCount, threadCount = _c === void 0 ? 10 : _c, _d = opts.headers, headers = _d === void 0 ? {} : _d, onProgress = opts.onProgress, onSuccess = opts.onSuccess, onFailed = opts.onFailed;
        this.url = url;
        this.filePath = filePath;
        this.retry = retry || this.retry;
        this.timeout = timeout;
        this.type = type;
        this.length = 0;
        this.threadCount = threadCount;
        this.headers = headers;
        this.onFailed = onFailed || this.onFailed;
        this.onProgress = onProgress;
        this.onSuccess = onSuccess;
        this.downloadState = DownloadState.stop;
    }
    DownLoad.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, inputStream, length_1, downloadMoreThread, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.downloadState = DownloadState.start;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, axios_1.default({
                                url: this.url,
                                method: 'GET',
                                responseType: 'stream',
                                timeout: this.timeout,
                                headers: this.headers,
                            })];
                    case 2:
                        response = _a.sent();
                        inputStream = response.data;
                        if (this.downloadState !== DownloadState.start) {
                            inputStream.destroy();
                            return [2 /*return*/, ''];
                        }
                        length_1 = (this.length = response.headers['content-length'] || 1);
                        console.log(this.url + " \u6587\u4EF6\u957F\u5EA6:" + this.getFileSize(length_1));
                        inputStream.destroy();
                        if (this.type === 0) {
                            if (length_1 < 1024 * 1024 * 10) {
                                //文件小于10M 单线程下载
                                console.log('文件小于10M 直接单线程下载');
                                this.type = 1;
                            }
                            else {
                                console.log('文件大于10M 启用多线程下载');
                                this.type = 2;
                            }
                        }
                        if (!(this.type === 1)) return [3 /*break*/, 4];
                        //文件小于10M 单线程下载
                        console.log('开始单线程下载');
                        return [4 /*yield*/, this.downloadOneThread()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        // 大于10M 多线程下载
                        // inputStream.destroy();//先关闭当前流 开启多线程下载
                        console.log('开始多线程下载');
                        downloadMoreThread = (this.downloadMoreThread =
                            new DownloadMoreThread_1.default({
                                downloadUrl: this.url,
                                desFile: this.filePath,
                                threadCount: this.threadCount,
                                length: length_1,
                                onProgress: this.onProgress,
                            }));
                        return [4 /*yield*/, downloadMoreThread.start()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        setTimeout(function () {
                            _this.onFailed(e_1.toString());
                        });
                        return [2 /*return*/];
                    case 8:
                        setTimeout(function () {
                            _this.removeConfig(_this.filePath);
                            _this.onSuccess && _this.onSuccess();
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    DownLoad.prototype.downloadOneThread = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, headers, response, inputStream, length, hasDownloadLength, doProgress, onError;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.mkFile(this.filePath);
                        config = this.getDownloadConfig(this.filePath);
                        headers = Object.assign({}, this.headers);
                        if (config.start == this.length) {
                            console.log('下载已完成!直接返回');
                            return [2 /*return*/, ''];
                        }
                        if (config.start != 0 && this.length !== 0) {
                            headers.Range = "bytes=" + config.start + "-" + this.length;
                        }
                        return [4 /*yield*/, axios_1.default({
                                url: this.url,
                                method: 'GET',
                                responseType: 'stream',
                                timeout: this.timeout,
                                headers: headers,
                            })];
                    case 1:
                        response = _a.sent();
                        inputStream = response.data;
                        if (this.downloadState !== DownloadState.start) {
                            inputStream.destroy();
                            return [2 /*return*/, ''];
                        }
                        length = response.headers['content-length'] || 1;
                        hasDownloadLength = config.start;
                        doProgress = function (newLength) {
                            hasDownloadLength += newLength;
                            var progress = hasDownloadLength / (+length + config.start);
                            _this.onProgress && _this.onProgress(progress);
                        };
                        onError = function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                            var e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        inputStream.destroy();
                                        if (!(this.retry > 0)) return [3 /*break*/, 5];
                                        this.retry--;
                                        fs.removeSync(this.filePath);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, this.downloadOneThread()];
                                    case 2:
                                        _a.sent();
                                        resolve('');
                                        return [3 /*break*/, 4];
                                    case 3:
                                        e_2 = _a.sent();
                                        reject(e_2);
                                        return [3 /*break*/, 4];
                                    case 4: return [3 /*break*/, 6];
                                    case 5:
                                        reject("\u4E0B\u8F7D\u5931\u8D25,\u91CD\u8BD5" + this.retry + "\u6B21");
                                        _a.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); };
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                var fd = fs.openSync(_this.filePath, 'a');
                                var pos = config.start;
                                var timeoutHandle = setTimeout(function () {
                                    console.log('超过10s没有新的数据产生，下载超时');
                                    onError(resolve, reject);
                                }, _this.timeout);
                                inputStream.on('data', function (chunk) {
                                    if (timeoutHandle) {
                                        clearTimeout(timeoutHandle);
                                    }
                                    if (_this.downloadState !== DownloadState.start) {
                                        inputStream.destroy();
                                        reject('用户手动停止，停止下载');
                                        return;
                                    }
                                    timeoutHandle = setTimeout(function () {
                                        console.log('超过10s没有新的数据产生，下载超时');
                                        onError(resolve, reject);
                                    }, _this.timeout);
                                    fs.writeSync(fd, chunk, 0, chunk.length, pos);
                                    pos += chunk.length;
                                    _this.saveConfig(_this.filePath, pos);
                                    doProgress(chunk.length);
                                });
                                inputStream.on('end', function (data) {
                                    if (timeoutHandle) {
                                        clearTimeout(timeoutHandle);
                                    }
                                    fs.closeSync(fd);
                                    resolve('');
                                });
                                inputStream.on('error', function (e) {
                                    fs.closeSync(fd);
                                    onError(resolve, reject);
                                });
                            })];
                }
            });
        });
    };
    DownLoad.prototype.stop = function () {
        this.downloadState = DownloadState.stop;
        if (this.downloadMoreThread) {
            this.downloadMoreThread.stop();
        }
    };
    DownLoad.prototype.getFileSize = function (length) {
        var ksize = length / 1024;
        if (ksize < 1024) {
            return ksize.toFixed(2) + 'k';
        }
        var msize = ksize / 1024;
        if (msize < 1024) {
            return msize.toFixed(2) + 'M';
        }
        var gsize = msize / 1024;
        return gsize.toFixed(2) + 'G';
    };
    DownLoad.prototype.mkFile = function (filePath) {
        var pathDes = path.resolve(filePath, '../');
        fs.ensureDirSync(pathDes);
    };
    DownLoad.prototype.getDownloadConfig = function (filePath) {
        var configPath = filePath + ".config";
        var content = fileutil_1.getFileContent(configPath);
        if (content) {
            return JSON.parse(content);
        }
        return {
            start: 0,
        };
    };
    DownLoad.prototype.saveConfig = function (filePath, pos) {
        var configPath = filePath + ".config";
        fileutil_1.saveJson(configPath, { start: pos });
    };
    DownLoad.prototype.removeConfig = function (filePath) {
        var configPath = filePath + ".config";
        fs.removeSync(configPath);
    };
    DownLoad.prototype.downloadThreads = function () { };
    return DownLoad;
}());
exports.DownLoad = DownLoad;
