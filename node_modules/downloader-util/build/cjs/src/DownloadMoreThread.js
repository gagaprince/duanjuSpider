"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var taskUtil_1 = require("./task/taskUtil");
var DownloadThreadTask_1 = require("./DownloadThreadTask");
var fileutil_1 = require("./utils/fileutil");
var fse = require('fs-extra');
var DownloadMoreThread = /** @class */ (function () {
    function DownloadMoreThread(opts) {
        var _this = this;
        this.step = 1024 * 512; //每个分片 0.5M
        var downloadUrl = opts.downloadUrl, desFile = opts.desFile, threadCount = opts.threadCount, length = opts.length, _a = opts.headers, headers = _a === void 0 ? {} : _a, onProgress = opts.onProgress;
        this.downloadUrl = downloadUrl;
        this.desFile = desFile;
        this.length = length;
        var config = (this.downloadConfig = this.getDownloadConfig(this.desFile));
        this.pool = new taskUtil_1.TaskPool(threadCount, config.hasDownloads.length);
        this.headers = headers;
        this.pool.onProgress(function (progress, task) {
            config.hasDownloads.push(task.getKey());
            _this.saveConfig(_this.desFile, config);
            if (onProgress) {
                onProgress(progress);
            }
        });
    }
    DownloadMoreThread.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.initTask()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DownloadMoreThread.prototype.stop = function () {
        var _a;
        (_a = this.pool) === null || _a === void 0 ? void 0 : _a.stop();
    };
    DownloadMoreThread.prototype.initTask = function () {
        return __awaiter(this, void 0, void 0, function () {
            var e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // 创建一个文件
                        this.createFile();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.beginTask()];
                    case 2:
                        _a.sent();
                        this.finish();
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.log(e_1);
                        throw e_1;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    DownloadMoreThread.prototype.createFile = function () {
        // fse.removeSync(this.desFile);
        fse.ensureFileSync(this.desFile);
    };
    DownloadMoreThread.prototype.beginTask = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var degree, keyset, start, end;
            var _this = this;
            return __generator(this, function (_b) {
                degree = 0;
                keyset = new Set();
                this.downloadConfig.hasDownloads.forEach(function (split) {
                    keyset.add(split);
                });
                while (degree < this.length) {
                    start = degree;
                    end = degree + this.step;
                    if (end >= this.length) {
                        end = this.length;
                    }
                    if (!keyset.has(start + "-" + end)) {
                        (_a = this.pool) === null || _a === void 0 ? void 0 : _a.addTask(new DownloadThreadTask_1.DownloadThreadTask(this.downloadUrl, start, end, this.desFile));
                    }
                    degree = end;
                }
                return [2 /*return*/, new Promise(function (res, rej) {
                        var _a, _b;
                        if ((_a = _this.pool) === null || _a === void 0 ? void 0 : _a.isEmpty()) {
                            res('');
                            return;
                        }
                        (_b = _this.pool) === null || _b === void 0 ? void 0 : _b.addFinishListener(function (tasks) {
                            var isFailed = tasks.some(function (task) {
                                return !task.taskIsSuccess;
                            });
                            isFailed ? rej('部分分片下载失败，请查看网络情况！') : res('');
                        });
                    })];
            });
        });
    };
    DownloadMoreThread.prototype.getDownloadConfig = function (filePath) {
        var configPath = filePath + ".more.config";
        var content = fileutil_1.getFileContent(configPath);
        if (content) {
            return JSON.parse(content);
        }
        return {
            hasDownloads: [],
        };
    };
    DownloadMoreThread.prototype.saveConfig = function (filePath, config) {
        var configPath = filePath + ".more.config";
        fileutil_1.saveJson(configPath, config);
    };
    DownloadMoreThread.prototype.removeConfig = function (filePath) {
        var configPath = filePath + ".more.config";
        fse.removeSync(configPath);
    };
    DownloadMoreThread.prototype.finish = function () {
        this.pool = null;
        this.removeConfig(this.desFile);
    };
    return DownloadMoreThread;
}());
exports.default = DownloadMoreThread;
