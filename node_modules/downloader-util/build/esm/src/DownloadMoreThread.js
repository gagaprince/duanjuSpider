import { TaskPool } from './task/taskUtil';
import { DownloadThreadTask } from './DownloadThreadTask';
import { getFileContent, saveJson } from './utils/fileutil';
const fse = require('fs-extra');
export default class DownloadMoreThread {
    constructor(opts) {
        this.step = 1024 * 512; //每个分片 0.5M
        const { downloadUrl, desFile, threadCount, length, headers = {}, onProgress, } = opts;
        this.downloadUrl = downloadUrl;
        this.desFile = desFile;
        this.length = length;
        let config = (this.downloadConfig = this.getDownloadConfig(this.desFile));
        this.pool = new TaskPool(threadCount, config.hasDownloads.length);
        this.headers = headers;
        this.pool.onProgress((progress, task) => {
            config.hasDownloads.push(task.getKey());
            this.saveConfig(this.desFile, config);
            if (onProgress) {
                onProgress(progress);
            }
        });
    }
    async start() {
        await this.initTask();
    }
    stop() {
        this.pool?.stop();
    }
    async initTask() {
        // 创建一个文件
        this.createFile();
        // 开始下载任务
        try {
            await this.beginTask();
            this.finish();
        }
        catch (e) {
            console.log(e);
            throw e;
        }
    }
    createFile() {
        // fse.removeSync(this.desFile);
        fse.ensureFileSync(this.desFile);
    }
    async beginTask() {
        let degree = 0;
        let keyset = new Set();
        this.downloadConfig.hasDownloads.forEach((split) => {
            keyset.add(split);
        });
        while (degree < this.length) {
            let start = degree;
            let end = degree + this.step;
            if (end >= this.length) {
                end = this.length;
            }
            if (!keyset.has(`${start}-${end}`)) {
                this.pool?.addTask(new DownloadThreadTask(this.downloadUrl, start, end, this.desFile));
            }
            degree = end;
        }
        return new Promise((res, rej) => {
            if (this.pool?.isEmpty()) {
                res('');
                return;
            }
            this.pool?.addFinishListener((tasks) => {
                const isFailed = tasks.some((task) => {
                    return !task.taskIsSuccess;
                });
                isFailed ? rej('部分分片下载失败，请查看网络情况！') : res('');
            });
        });
    }
    getDownloadConfig(filePath) {
        const configPath = `${filePath}.more.config`;
        const content = getFileContent(configPath);
        if (content) {
            return JSON.parse(content);
        }
        return {
            hasDownloads: [],
        };
    }
    saveConfig(filePath, config) {
        const configPath = `${filePath}.more.config`;
        saveJson(configPath, config);
    }
    removeConfig(filePath) {
        const configPath = `${filePath}.more.config`;
        fse.removeSync(configPath);
    }
    finish() {
        this.pool = null;
        this.removeConfig(this.desFile);
    }
}
