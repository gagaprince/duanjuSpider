import { Task } from './task/taskUtil';
import axios from 'axios';
const fs = require('fs');
var TASK_DOWNLOAD_STATUS;
(function (TASK_DOWNLOAD_STATUS) {
    TASK_DOWNLOAD_STATUS[TASK_DOWNLOAD_STATUS["START"] = 0] = "START";
    TASK_DOWNLOAD_STATUS[TASK_DOWNLOAD_STATUS["STOP"] = 1] = "STOP";
})(TASK_DOWNLOAD_STATUS || (TASK_DOWNLOAD_STATUS = {}));
export class DownloadThreadTask extends Task {
    constructor(downloadUrl, start, end, desFile, headers = {}) {
        super();
        this.downloadUrl = downloadUrl;
        this.start = start;
        this.end = end;
        this.desFile = desFile;
        this.headers = headers;
        this.retry = 10;
        this.status = TASK_DOWNLOAD_STATUS.START;
    }
    getKey() {
        return `${this.start}-${this.end}`;
    }
    async task() {
        try {
            const ret = await this.doTask();
            return ret;
        }
        catch (e) {
            if (e === '用户手动停止，停止下载')
                throw e;
            if (this.retry > 0) {
                this.retry--;
                return await this.task();
            }
            throw e;
        }
    }
    async doTask() {
        if (this.status !== TASK_DOWNLOAD_STATUS.START)
            return;
        const response = await axios({
            url: this.downloadUrl,
            method: 'GET',
            responseType: 'stream',
            headers: Object.assign({ Range: `bytes=${this.start}-${this.end}` }, this.headers),
        });
        const inputStream = (this.inputStream = response.data);
        const length = response.headers['content-length'] || 1;
        // console.log(`分片:${this.start}-${this.end}`);
        // console.log('长度:' + length);
        return new Promise((res, rej) => {
            const fd = fs.openSync(this.desFile, 'a');
            let pos = this.start;
            let timeoutHandle = setTimeout(() => {
                inputStream.destroy();
                rej('10s没有新数据读出，网络有问题终端');
            }, 10000);
            inputStream.on('data', (chunk) => {
                if (timeoutHandle != null) {
                    clearTimeout(timeoutHandle);
                }
                if (this.status !== TASK_DOWNLOAD_STATUS.START) {
                    inputStream.destroy();
                    rej('用户手动停止，停止下载');
                    return;
                }
                timeoutHandle = setTimeout(() => {
                    inputStream.destroy();
                    rej('10s没有新数据读出，网络有问题终端');
                }, 10000);
                // console.log(`当前属于分片:${this.start}-${this.end}`);
                fs.writeSync(fd, chunk, 0, chunk.length, pos);
                pos += chunk.length;
            });
            inputStream.on('end', () => {
                if (timeoutHandle != null) {
                    clearTimeout(timeoutHandle);
                }
                res('');
            });
            inputStream.on('error', rej);
        });
    }
    stop() {
        this.status = TASK_DOWNLOAD_STATUS.STOP;
        this.inputStream?.destroy();
    }
}
